"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[78872],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},p=Object.keys(e);for(r=0;r<p.length;r++)n=p[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(r=0;r<p.length;r++)n=p[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),i=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},s=function(e){var t=i(e.components);return r.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,p=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=i(n),m=a,v=d["".concat(o,".").concat(m)]||d[m]||u[m]||p;return n?r.createElement(v,c(c({ref:t},s),{},{components:n})):r.createElement(v,c({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var p=n.length,c=new Array(p);c[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,c[1]=l;for(var i=2;i<p;i++)c[i]=n[i];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},96410:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return o},metadata:function(){return i},toc:function(){return s},default:function(){return d}});var r=n(87462),a=n(63366),p=(n(67294),n(3905)),c=["components"],l={title:"Enum AdvancementType",sidebar_label:"AdvancementType",description:"Represents type of advancement frame"},o="Enum AdvancementType",i={unversionedId:"api/CopperSharp.Advancements/AdvancementType",id:"api/CopperSharp.Advancements/AdvancementType",title:"Enum AdvancementType",description:"Represents type of advancement frame",source:"@site/docs/api/CopperSharp.Advancements/AdvancementType.md",sourceDirName:"api/CopperSharp.Advancements",slug:"/api/CopperSharp.Advancements/AdvancementType",permalink:"/docs/api/CopperSharp.Advancements/AdvancementType",editUrl:"https://github.com/Maxuss/CopperSharp/docs/api/CopperSharp.Advancements/AdvancementType.md",tags:[],version:"current",frontMatter:{title:"Enum AdvancementType",sidebar_label:"AdvancementType",description:"Represents type of advancement frame"},sidebar:"tutorialSidebar",previous:{title:"AdvancementReward",permalink:"/docs/api/CopperSharp.Advancements/AdvancementReward"},next:{title:"Criterion",permalink:"/docs/api/CopperSharp.Advancements/Criterion"}},s=[{value:"<strong>Assembly</strong>: CopperSharp.dll",id:"assembly-coppersharpdll",children:[],level:6},{value:"View Source",id:"view-source",children:[],level:6},{value:"Fields",id:"fields",children:[{value:"Task",id:"task",children:[{value:"View Source",id:"view-source-1",children:[],level:6}],level:3},{value:"Goal",id:"goal",children:[{value:"View Source",id:"view-source-2",children:[],level:6}],level:3},{value:"Challenge",id:"challenge",children:[{value:"View Source",id:"view-source-3",children:[],level:6}],level:3}],level:2}],u={toc:s};function d(e){var t=e.components,n=(0,a.Z)(e,c);return(0,p.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,p.kt)("h1",{id:"enum-advancementtype"},"Enum AdvancementType"),(0,p.kt)("p",null,"Represents type of advancement frame"),(0,p.kt)("h6",{id:"assembly-coppersharpdll"},(0,p.kt)("strong",{parentName:"h6"},"Assembly"),": CopperSharp.dll"),(0,p.kt)("h6",{id:"view-source"},(0,p.kt)("a",{parentName:"h6",href:"https://github.com/Maxuss/CopperSharp/blob/master/CopperSharp/Advancements/Advancement.cs#L279"},"View Source")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public enum AdvancementType : int\n")),(0,p.kt)("h2",{id:"fields"},"Fields"),(0,p.kt)("h3",{id:"task"},"Task"),(0,p.kt)("p",null,"Simple task advancement"),(0,p.kt)("h6",{id:"view-source-1"},(0,p.kt)("a",{parentName:"h6",href:"https://github.com/Maxuss/CopperSharp/blob/master/CopperSharp/Advancements/Advancement.cs#L284"},"View Source")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"Task = 0\n")),(0,p.kt)("h3",{id:"goal"},"Goal"),(0,p.kt)("p",null,"A goal advancement, usually harder to achieve"),(0,p.kt)("h6",{id:"view-source-2"},(0,p.kt)("a",{parentName:"h6",href:"https://github.com/Maxuss/CopperSharp/blob/master/CopperSharp/Advancements/Advancement.cs#L289"},"View Source")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"Goal = 1\n")),(0,p.kt)("h3",{id:"challenge"},"Challenge"),(0,p.kt)("p",null,"A challenge advancement, usually the hardest"),(0,p.kt)("h6",{id:"view-source-3"},(0,p.kt)("a",{parentName:"h6",href:"https://github.com/Maxuss/CopperSharp/blob/master/CopperSharp/Advancements/Advancement.cs#L294"},"View Source")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"Challenge = 2\n")))}d.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[606],{3905:function(e,t,a){a.d(t,{Zo:function(){return s},kt:function(){return d}});var r=a(67294);function c(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function n(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){c(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,c=function(e,t){if(null==e)return{};var a,r,c={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(c[a]=e[a]);return c}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(c[a]=e[a])}return c}var i=r.createContext({}),p=function(e){var t=r.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):n(n({},t),e)),a},s=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var a=e.components,c=e.mdxType,l=e.originalType,i=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),h=p(a),d=c,m=h["".concat(i,".").concat(d)]||h[d]||u[d]||l;return a?r.createElement(m,n(n({ref:t},s),{},{components:a})):r.createElement(m,n({ref:t},s))}));function d(e,t){var a=arguments,c=t&&t.mdxType;if("string"==typeof e||c){var l=a.length,n=new Array(l);n[0]=h;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:c,n[1]=o;for(var p=2;p<l;p++)n[p]=a[p];return r.createElement.apply(null,n)}return r.createElement.apply(null,a)}h.displayName="MDXCreateElement"},5062:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return o},contentTitle:function(){return i},metadata:function(){return p},toc:function(){return s},default:function(){return h}});var r=a(87462),c=a(63366),l=(a(67294),a(3905)),n=["components"],o={title:"Enum IFaceAttachable.Face",sidebar_label:"IFaceAttachable.Face",description:"Type of attached face"},i="Enum IFaceAttachable.Face",p={unversionedId:"api/CopperSharp.Blocks.Data/IFaceAttachable.Face",id:"api/CopperSharp.Blocks.Data/IFaceAttachable.Face",title:"Enum IFaceAttachable.Face",description:"Type of attached face",source:"@site/docs/api/CopperSharp.Blocks.Data/IFaceAttachable.Face.md",sourceDirName:"api/CopperSharp.Blocks.Data",slug:"/api/CopperSharp.Blocks.Data/IFaceAttachable.Face",permalink:"/docs/api/CopperSharp.Blocks.Data/IFaceAttachable.Face",editUrl:"https://github.com/Maxuss/CopperSharp/docs/api/CopperSharp.Blocks.Data/IFaceAttachable.Face.md",tags:[],version:"current",frontMatter:{title:"Enum IFaceAttachable.Face",sidebar_label:"IFaceAttachable.Face",description:"Type of attached face"},sidebar:"tutorialSidebar",previous:{title:"IDirectional",permalink:"/docs/api/CopperSharp.Blocks.Data/IDirectional"},next:{title:"IFaceAttachable",permalink:"/docs/api/CopperSharp.Blocks.Data/IFaceAttachable"}},s=[{value:"<strong>Assembly</strong>: CopperSharp.dll",id:"assembly-coppersharpdll",children:[],level:6},{value:"View Source",id:"view-source",children:[],level:6},{value:"Fields",id:"fields",children:[{value:"Floor",id:"floor",children:[{value:"View Source",id:"view-source-1",children:[],level:6}],level:3},{value:"Wall",id:"wall",children:[{value:"View Source",id:"view-source-2",children:[],level:6}],level:3},{value:"Ceiling",id:"ceiling",children:[{value:"View Source",id:"view-source-3",children:[],level:6}],level:3}],level:2}],u={toc:s};function h(e){var t=e.components,a=(0,c.Z)(e,n);return(0,l.kt)("wrapper",(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"enum-ifaceattachableface"},"Enum IFaceAttachable.Face"),(0,l.kt)("p",null,"Type of attached face"),(0,l.kt)("h6",{id:"assembly-coppersharpdll"},(0,l.kt)("strong",{parentName:"h6"},"Assembly"),": CopperSharp.dll"),(0,l.kt)("h6",{id:"view-source"},(0,l.kt)("a",{parentName:"h6",href:"https://github.com/Maxuss/CopperSharp/blob/master/CopperSharp/Blocks/Data/IFaceAttachable.cs#L11"},"View Source")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public enum Face : int\n")),(0,l.kt)("h2",{id:"fields"},"Fields"),(0,l.kt)("h3",{id:"floor"},"Floor"),(0,l.kt)("p",null,"Attached to floor, pointing vertically"),(0,l.kt)("h6",{id:"view-source-1"},(0,l.kt)("a",{parentName:"h6",href:"https://github.com/Maxuss/CopperSharp/blob/master/CopperSharp/Blocks/Data/IFaceAttachable.cs#L16"},"View Source")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"Floor = 0\n")),(0,l.kt)("h3",{id:"wall"},"Wall"),(0,l.kt)("p",null,"Attached to a wall, pointing horizontally"),(0,l.kt)("h6",{id:"view-source-2"},(0,l.kt)("a",{parentName:"h6",href:"https://github.com/Maxuss/CopperSharp/blob/master/CopperSharp/Blocks/Data/IFaceAttachable.cs#L21"},"View Source")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"Wall = 1\n")),(0,l.kt)("h3",{id:"ceiling"},"Ceiling"),(0,l.kt)("p",null,"Attached to a ceiling, pointing vertically"),(0,l.kt)("h6",{id:"view-source-3"},(0,l.kt)("a",{parentName:"h6",href:"https://github.com/Maxuss/CopperSharp/blob/master/CopperSharp/Blocks/Data/IFaceAttachable.cs#L26"},"View Source")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"Ceiling = 2\n")))}h.isMDXComponent=!0}}]);
{
  "api/CopperSharp.CopperSharp.html": {
    "href": "api/CopperSharp.CopperSharp.html",
    "title": "Class CopperSharp | CopperSharp",
    "keywords": "Class CopperSharp Class, containing some info on the CopperSharp Inheritance System.Object CopperSharp Namespace : CopperSharp Assembly : CopperSharp.dll Syntax public static class CopperSharp : Object Properties Version Current version of CopperSharp Declaration public static Version Version { get; } Property Value Type Description System.Version"
  },
  "api/CopperSharp.Datapack.DatapackWriter.html": {
    "href": "api/CopperSharp.Datapack.DatapackWriter.html",
    "title": "Class DatapackWriter | CopperSharp",
    "keywords": "Class DatapackWriter Class used for creating datapacks Inheritance System.Object DatapackWriter Namespace : CopperSharp.Datapack Assembly : CopperSharp.dll Syntax public sealed class DatapackWriter : Object Constructors DatapackWriter() Declaration public DatapackWriter()"
  },
  "api/CopperSharp.Datapack.html": {
    "href": "api/CopperSharp.Datapack.html",
    "title": "Namespace CopperSharp.Datapack | CopperSharp",
    "keywords": "Namespace CopperSharp.Datapack Classes DatapackWriter Class used for creating datapacks PackFormat Represents a format for pack"
  },
  "api/CopperSharp.Datapack.PackFormat.html": {
    "href": "api/CopperSharp.Datapack.PackFormat.html",
    "title": "Class PackFormat | CopperSharp",
    "keywords": "Class PackFormat Represents a format for pack Inheritance System.Object PackFormat Namespace : CopperSharp.Datapack Assembly : CopperSharp.dll Syntax public sealed class PackFormat : Enum Fields v1_13 For MC versions 1.13 to 1.14.4 Declaration public const PackFormat v1_13 Field Value Type Description PackFormat v1_15 For MC versions 1.15 to 1.16.1 Declaration public const PackFormat v1_15 Field Value Type Description PackFormat v1_16_2 For MC versions 1.16.2 to 1.16.5 Declaration public const PackFormat v1_16_2 Field Value Type Description PackFormat v1_17 For MC versions 1.17-1.17.1 Declaration public const PackFormat v1_17 Field Value Type Description PackFormat v1_18 For MC versions 1.18-1.18.1+ Declaration public const PackFormat v1_18 Field Value Type Description PackFormat value__ Declaration public byte value__ Field Value Type Description System.Byte"
  },
  "api/CopperSharp.Functions.html": {
    "href": "api/CopperSharp.Functions.html",
    "title": "Namespace CopperSharp.Functions | CopperSharp",
    "keywords": "Namespace CopperSharp.Functions Interfaces IAction Represents a function completion step. Requires the implementer to be able to convert to command string."
  },
  "api/CopperSharp.Functions.IAction.html": {
    "href": "api/CopperSharp.Functions.IAction.html",
    "title": "Interface IAction | CopperSharp",
    "keywords": "Interface IAction Represents a function completion step. Requires the implementer to be able to convert to command string. Namespace : CopperSharp.Functions Assembly : CopperSharp.dll Syntax public interface IAction Methods ToAction() Converts the current IAction to command string. Declaration string ToAction() Returns Type Description System.String Converted string from current action"
  },
  "api/CopperSharp.html": {
    "href": "api/CopperSharp.html",
    "title": "Namespace CopperSharp | CopperSharp",
    "keywords": "Namespace CopperSharp Classes CopperSharp Class, containing some info on the CopperSharp"
  },
  "api/CopperSharp.Modules.html": {
    "href": "api/CopperSharp.Modules.html",
    "title": "Namespace CopperSharp.Modules | CopperSharp",
    "keywords": "Namespace CopperSharp.Modules Classes Module Module Module represents a Datapack, that can be combined with other packs into a single Datapack. A Module can internally contain different items and entities, that will be converted to functions on runtime. It can also normally contain different functions, advancements, recipes, etc. ModuleRegistry Represents a registry, that can be used to register items for Modules. Implements all the Registry interfaces. Interfaces IFunctionRegistry This registry is used to register functions for datapacks. You should not implement this interface, as Module already has ModuleRegistry , which implements this interface"
  },
  "api/CopperSharp.Modules.IFunctionRegistry.html": {
    "href": "api/CopperSharp.Modules.IFunctionRegistry.html",
    "title": "Interface IFunctionRegistry | CopperSharp",
    "keywords": "Interface IFunctionRegistry This registry is used to register functions for datapacks. You should not implement this interface, as Module already has ModuleRegistry , which implements this interface Namespace : CopperSharp.Modules Assembly : CopperSharp.dll Syntax public interface IFunctionRegistry Properties Actions Actions to be used Declaration List<IAction> Actions { get; set; } Property Value Type Description System.Collections.Generic.List < IAction >"
  },
  "api/CopperSharp.Modules.Module.html": {
    "href": "api/CopperSharp.Modules.Module.html",
    "title": "Class Module | CopperSharp",
    "keywords": "Class Module Module Module represents a Datapack, that can be combined with other packs into a single Datapack. A Module can internally contain different items and entities, that will be converted to functions on runtime. It can also normally contain different functions, advancements, recipes, etc. Inheritance System.Object Module Namespace : CopperSharp.Modules Assembly : CopperSharp.dll Syntax public abstract class Module : Object Constructors Module() Declaration public Module() Properties Registry Declaration public ModuleRegistry Registry { get; } Property Value Type Description ModuleRegistry"
  },
  "api/CopperSharp.Modules.ModuleRegistry.html": {
    "href": "api/CopperSharp.Modules.ModuleRegistry.html",
    "title": "Class ModuleRegistry | CopperSharp",
    "keywords": "Class ModuleRegistry Represents a registry, that can be used to register items for Modules. Implements all the Registry interfaces. Inheritance System.Object ModuleRegistry Namespace : CopperSharp.Modules Assembly : CopperSharp.dll Syntax public sealed class ModuleRegistry : Object Properties OwnerModule Module-owner of current registry. Null by default. If you want to use shared registry, check out Shared Declaration public Module OwnerModule { get; } Property Value Type Description Module Shared Registry, that is shared between all the Modules in the CopperSharp. Might be useful for Combining modules into single datapack. This registry has always null OwnerModule ! Declaration public static ModuleRegistry Shared { get; } Property Value Type Description ModuleRegistry See Also IFunctionRegistry"
  },
  "guides/example_guide.html": {
    "href": "guides/example_guide.html",
    "title": "This is an example guide | CopperSharp",
    "keywords": "This is an example guide Some guide"
  },
  "guides/index.html": {
    "href": "guides/index.html",
    "title": "This is documentation | CopperSharp",
    "keywords": "This is documentation Guides"
  },
  "index.html": {
    "href": "index.html",
    "title": "CopperSharp | CopperSharp",
    "keywords": "CopperSharp This is index file"
  }
}